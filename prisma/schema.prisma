datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String                   @id @default(cuid())
  name              String?
  email             String?                  @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  rekr_coins        BigInt                   @default(1000)
  high_or_low       HighOrLow?
  daily_claims      DailyClaim[]
  referrals         Referral[]
  poker_for_poke    Poke[]                   @relation("poker")
  poked_for_poke    Poke[]                   @relation("poked")
  isPoked           Boolean                  @default(false)
  minesweeperBoards PlayerMineSweeperBoard[]
}

model PlayerMineSweeperBoard {
  id          String           @id @default(cuid())
  date        DateTime         @default(now())
  gameOver    GameOver?
  mineBoardId String
  playerId    String
  mineBoard   MineSweeperBoard @relation(fields: [mineBoardId], references: [id], onDelete: Cascade)
  player      User             @relation(fields: [playerId], references: [id], onDelete: Cascade)
  boxes       PlayerBox[]

  @@index([mineBoardId])
  @@index([playerId])
}

enum GameOver {
  WON
  LOST
}

model PlayerBox {
  id            String                 @id @default(cuid())
  boxState      PlayerBoxState         @default(NOTCLICKED)
  mineId        String
  playerBoardId String
  mine          Mine                   @relation(fields: [mineId], references: [id], onDelete: Cascade)
  playerBoard   PlayerMineSweeperBoard @relation(fields: [playerBoardId], references: [id], onDelete: Cascade)

  @@index([mineId])
  @@index([playerBoardId])
}

enum PlayerBoxState {
  CLICKED
  FLAGGED
  NOTCLICKED
}

model MineSweeperBoard {
  id           String                   @id @default(cuid())
  width        Int
  height       Int
  mines        Mine[]
  playerBoards PlayerMineSweeperBoard[]
}

model Mine {
  id          String           @id @default(cuid())
  index       Int
  isMine      Boolean
  boardId     String
  board       MineSweeperBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  playerBoxes PlayerBox[]

  @@index([boardId])
}

model Poke {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  pokerId     String
  pokedUserId String

  poker User @relation(name: "poker", fields: [pokerId], references: [id], onDelete: Cascade)

  poked User @relation(name: "poked", fields: [pokedUserId], references: [id], onDelete: Cascade)

  @@index([pokerId])
  @@index([pokedUserId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HighOrLow {
  userId       String @id
  visible_card Int
  hidden_card  Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DailyClaim {
  id     String   @id @default(cuid())
  date   DateTime @default(now())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Referral {
  id           String       @id @default(cuid())
  userId       String
  referralType ReferralType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum ReferralType {
  GITHUB_FOLLOW
  REKR_CASINO_STAR
}
